{% extends 'base.html.twig' %}

{% block title %}{{randonnee.nomRandonnee}}{% endblock %}

{% block body %}
<main>
    <div class='ficheActivite__title d-flex justify-content-between mt-5 mb-3'>
        <h1>{{randonnee.nomRandonnee}}</h1> 
    </div>  

        <section class='ficheActivite'>                  

            <h2>Description</h2>

                    <p> &#127968 Ville de départ: {{randonnee.villeRandonnee}}<p>                         
                    <p> &#129517 Coordonnées du point de départ: {{randonnee.geopointRandonnee}}<p>                         
                    <p> &#129406 Distance du parcours : <span class='distanceRandonneText'></span> km</p>                         


            <h2>Parcours</h2>
            
            <div id='map'></div>
            <div class='data-map' data-coordinates='{{randonnee.geometryRandonnee|json_encode}}'></div>

            <script>
                let map = L.map('map').setView([43.610769, 3.876716], 12);
                L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                }).addTo(map);

                document.addEventListener('DOMContentLoaded', function() { 
                let jsDataMap = document.querySelector('.data-map');    
                let data = JSON.parse(jsDataMap.dataset.coordinates); 

                let newdata = "";
                for( var i = 0; i < data.length; i++ ){ 
                    if( !(data[i] == '\n' || data[i] == '\r') )
                newdata += data[i];
                }      
            
                
                // Charger le GeoJSON
                let geojson = L.geoJson(JSON.parse(newdata));
                // Boucler à travers tous les points de coordonnées
                geojson.eachLayer(function (layer) {
                let latlngs = layer.getLatLngs();
                
                // Boucler à travers tous les points de coordonnées dans chaque géométrie
                for (let i = 0; i < latlngs.length; i++) {
                    let latlng = latlngs[i];
                    let latlng2 = latlngs[i+1];
                    // Inverser les coordonnées
                    latlng.reverse();
                }
                
                let distanceRandonne=0;
                
                console.log(`latlngs`, latlngs);
                for (let i = 0; i < latlngs.length; i++) {
                    for (let a = 0; a < latlngs[i].length-1; a++) {
                    distanceRandonne += latlngs[i][a].distanceTo(latlngs[i][a+1]);
                }
                }

                distanceArrondi = (distanceRandonne/1000).toFixed(2)

                let distanceRandonneText = document.querySelector('.distanceRandonneText')
                distanceRandonneText.textContent = distanceArrondi           

                let polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);
                map.fitBounds(polyline.getBounds());
                });

                });             
                
            
            </script>
       
 <button class='btn btnRetourActivite mt-3'><a href='{{ path('app_dashboard') }}'> Retour </a></button> 
    </section>
    

</main>
{% endblock %}
