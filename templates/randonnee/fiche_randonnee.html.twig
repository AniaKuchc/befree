{% extends 'base.html.twig' %}

{% block title %}{{randonnee.nomRandonnee}}{% endblock %}

{% block body %}
{{ dump(randonnee) }}
<main>
<div class='ficheActivite__title d-flex justify-content-between mt-5 mb-3'>
    <h1>{{randonnee.nomRandonnee}}</h1>
     {# {% if not is_granted('ROLE_ADMIN') %}
        {% if isRegister == null %}    
            {% if placesRestantes > 0 %}
                <a href='{{ path('app_inscription_activite', { id: activite.id }) }}' class='btn btn-warning'>Je m'inscris</a>
            {% else %}
                <p>Il ne reste plus de place disponible pour cette activité</p>
            {% endif %}
        {% else %}
            <p>Vous etes déjà inscris à cette activité!</p>
            <a href='{{ path('app_desinscription_activite', { id: activite.id }) }}' class='btn btn-danger'>Me désinscrire</a>
        {% endif %}
    {% endif %} #}




</div>  

    <section class='ficheActivite'>

        <ul>
       
       
        </ul>

        <h2>Description</h2>
        <h2>Parcours</h2>

         
<div id='map'></div>
        <div class='data-map' data-coordinates='{{randonnee.geometryRandonnee|json_encode}}'></div>

    <script>
        let map = L.map('map').setView([43.610769, 3.876716], 12);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        document.addEventListener('DOMContentLoaded', function() { 
        let jsDataMap = document.querySelector('.data-map');    
        let data = JSON.parse(jsDataMap.dataset.coordinates); 
        console.log(`data:`, typeof(data));
           
            // Charger le GeoJSON
        let geojson = L.geoJson(JSON.parse(data));



        // Boucler à travers tous les points de coordonnées
        geojson.eachLayer(function (layer) {
        let latlngs = layer.getLatLngs();
        // Boucler à travers tous les points de coordonnées dans chaque géométrie
        for (let i = 0; i < latlngs.length; i++) {
            let latlng = latlngs[i];
            // Inverser les coordonnées
            latlng.reverse();
        }
        let polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);
        map.fitBounds(polyline.getBounds());
        });

});
       
       
        

       
    </script>
       

    </section>
    

</main>
{% endblock %}
